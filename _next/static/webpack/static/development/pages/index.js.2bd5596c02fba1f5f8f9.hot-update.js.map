{"version":3,"file":"static/webpack/static/development/pages/index.js.2bd5596c02fba1f5f8f9.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport Head from 'next/head'\nimport { Button, ButtonGroup, Input } from 'reactstrap';\n\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/Clipboard\n */\n\nconst Home = () => {\n  const textareaRef = useRef<HTMLTextAreaElement>();\n  const buttonGroupRef = useRef<HTMLDivElement>();\n\n  useEffect(() => {\n    const resizeListener = () => {\n      if (!buttonGroupRef.current || !textareaRef.current) {\n        return;\n      }\n\n      const buttonGroup = buttonGroupRef.current;\n      const textarea = textareaRef.current;\n\n      console.log(buttonGroupRef.current.scrollHeight);\n      const newHeight = window.innerHeight - buttonGroup.scrollHeight\n      textarea.style.height = `${newHeight}px`;\n\n      window.addEventListener('resize', resizeListener);\n      return () => {\n        window.removeEventListener('resize', resizeListener);\n      };\n    }\n  });\n\n  return (\n    <div className=\"p-1\">\n      <Head>\n        <title>Home</title>\n        <link rel='icon' href='/favicon.ico' />\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossOrigin=\"anonymous\" />\n      </Head>\n      <Input\n        type=\"textarea\"\n        innerRef={textareaRef}\n        onChange={(e) => {\n          //  const textarea = e.target;\n          //  textarea.style.height = `${textarea.scrollHeight}px`;\n        }}\n        style={{height: 'auto'}}\n        className=\"mb-1\"\n      />\n      <div className=\"btn-group\" role=\"group\" style={{display: 'flex'}} ref={buttonGroupRef}>\n        <Button \n          color=\"warning\"\n          onClick={async () => {\n            const textarea = textareaRef.current;\n            if (!textarea) {\n              return;\n            }\n\n            const text = await navigator.clipboard.readText();\n            textarea.value = text;\n          }}>\n          Paste\n        </Button>\n        <Button\n          color=\"success\"\n          onClick={async () => {\n            const textarea = textareaRef.current;\n            if (!textarea) {\n              return;\n            }\n\n            await navigator.clipboard.writeText(textarea.value);\n          }}>\n          Copy\n        </Button>\n      </div>\n    </div>\n  )\n};\n\nexport default Home\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;;;;A","sourceRoot":""}